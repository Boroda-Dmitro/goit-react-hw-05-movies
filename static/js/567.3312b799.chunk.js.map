{"version":3,"file":"static/js/567.3312b799.chunk.js","mappings":"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","sources":["Pages/Movies/Movies.jsx","Servises/fetchMovies.jsx"],"sourcesContent":["import { fetchSerchMovies } from 'Servises/fetchMovies';\nimport { useState, useEffect } from 'react';\nimport { Link, useLocation, useSearchParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\n\nconst Movies = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [movies, setMovies] = useState([]);\n  const [search, setSearch] = useState('');\n  const location = useLocation();\n  const params = searchParams.get('query');\n\n  const handleChange = e => {\n    setSearch(e.target.value.trim());\n    if (e.target.value === '') {\n        setSearchParams({})\n    }\n  };\n\n  useEffect(() => {\n    if (!params) {\n      return;\n    }\n    const fetchMovies = async () => {\n      try {\n        const searchedMovies = await fetchSerchMovies(params);\n        if (searchedMovies.length === 0) {\n          return toast.error(`No movies found for '${params}'`);\n        }\n        setMovies(searchedMovies);\n      } catch (error) {\n        console.log(error);\n      }\n    };\n    fetchMovies();\n  }, [params]);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (search === '') {\n      return toast.error(`Please enter a movie name`);\n    }\n\n    setSearchParams({ query: search });\n  };\n\n  return (\n    <div>\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          autoComplete=\"off\"\n          autoFocus\n          placeholder=\"Search movies\"\n          onChange={handleChange}\n          value={search}\n        />\n        <button type=\"submit\">Search</button>\n      </form>\n      <ul>\n        {movies.length > 0 && params &&\n          movies.map(movie => {\n            const title = movie.title ?? movie.name;\n            return (\n              <li key={movie.id}>\n                <Link to={`/movies/${movie.id}`} state={{ from: location }}>{title}</Link>\n              </li>\n            );\n          })}\n      </ul>\n    </div>\n  );\n};\n\nexport default Movies;\n","import axios from 'axios';\n\nexport const fetchTrendingMovies = async () => {\n  const URL = 'https://api.themoviedb.org/3/trending/all/day';\n  const KEY = 'efcd079eaa7382b8a49b8fa3c0261e85';\n\n  const options = new URLSearchParams({\n    api_key: KEY,\n  });\n  try {\n    const TrendingMovies = await axios.get(`${URL}?${options}`);\n    return TrendingMovies.data.results;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n\nexport const fetchMovieById = async (id) => {\n  const URL = `https://api.themoviedb.org/3/movie/${id}`;\n  const KEY = 'efcd079eaa7382b8a49b8fa3c0261e85';\n\n  const options = new URLSearchParams({\n    api_key: KEY,\n  });\n\n  try {\n    const movie = await axios.get(`${URL}?${options}`);\n    return movie.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n\n\nexport const fetchMovieCast = async (id) => {\n  const URL = `https://api.themoviedb.org/3/movie/${id}/credits`;\n  const KEY = 'efcd079eaa7382b8a49b8fa3c0261e85';\n\n  const options = new URLSearchParams({\n    api_key: KEY,\n  });\n\n  try {\n    const movie = await axios.get(`${URL}?${options}`);\n    return movie.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const fetchMovieReviews = async (id) => {\n  const URL = `https://api.themoviedb.org/3/movie/${id}/reviews`;\n  const KEY = 'efcd079eaa7382b8a49b8fa3c0261e85';\n\n  const options = new URLSearchParams({\n    api_key: KEY,\n  });\n\n  try {\n    const movie = await axios.get(`${URL}?${options}`);\n    return movie.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const fetchSerchMovies = async (search) => {\n  const URL = `https://api.themoviedb.org/3/search/movie`;\n  const KEY = 'efcd079eaa7382b8a49b8fa3c0261e85';\n  \n  const options = new URLSearchParams({\n    api_key: KEY,\n    query: search,\n  });\n  \n  try {\n    const movie = await axios.get(`${URL}?${options}`);\n    return movie.data.results;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n"],"names":["useSearchParams","searchParams","setSearchParams","useState","movies","setMovies","search","setSearch","location","useLocation","params","get","useEffect","fetchMovies","fetchSerchMovies","searchedMovies","length","toast","console","log","onSubmit","e","preventDefault","query","type","autoComplete","autoFocus","placeholder","onChange","target","value","trim","map","movie","title","name","to","id","state","from","fetchTrendingMovies","options","URLSearchParams","api_key","axios","TrendingMovies","data","results","fetchMovieById","URL","fetchMovieCast","fetchMovieReviews"],"sourceRoot":""}